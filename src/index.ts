import { app, shell, BrowserWindow, session, Menu, ipcMain} from 'electron';
import server from '../server/server';
import removeGrafanaLogin from '../src/components/removeGrafanaLogin';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Server is embedded in the main process and starts with the application
server.listen();

removeGrafanaLogin('default', 'prometheus-grafana');

let mainWindow:Electron.BrowserWindow;

const createWindow = (): void => {
  // Creates a session for the window and adjusts the response's headers security settings to allow for iframes and various cross-origin assets
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {

    if(details.responseHeaders['X-Frame-Options']){
      delete details.responseHeaders['X-Frame-Options'];
    }

    callback({ responseHeaders: Object.assign({
      'Content-Security-Policy': [ 'default-src * \'unsafe-eval\' \'unsafe-inline\'; style-src https: \'self\' \'unsafe-inline\'; frame-src *; img-src file: data: http: https:;' ]          
    }, details.responseHeaders)});
  });
  
  // Creates the browser window
  mainWindow = new BrowserWindow({
    height: 1200,
    width: 1600,
    show:false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Wait until the page fully loads before showing the main window to the user.
  mainWindow.on ('ready-to-show', mainWindow.show);

  // Creates an integrated menu within electron
  const mainMenu = Menu.buildFromTemplate([
    {
      label: 'Menu',
      submenu: [
        {
          label: 'Exit app',
          click() {
            app.quit();
          }
        },
        {
          label: 'Open dev tools',
          click() {
            mainWindow.webContents.openDevTools();
          }
        },
        {
          label: 'Close dev tools',
          click() {
            mainWindow.webContents.closeDevTools();
          }
        }
      ]
    }
  ]);

  Menu.setApplicationMenu(mainMenu);
};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// This IPC communicates with the renderer through the "goGithub" Channel to open a browser window for OAuth 
ipcMain.handle('goGithub', (event,args) => {
  shell.openExternal('https://github.com/login/oauth/authorize?scope=user&client_id=e4a70dc5fa8c873142f8');
});

// Listener for the url that will come from the server.
// If received, the GitHub authorization was successful and is sent to the renderer process through the newUrl channel.
const gitoAuth = '';
const customScheme = 'koob-app';
app.setAsDefaultProtocolClient(customScheme);
app.on('open-url', (event:Event, url:string) => {
  if(url === 'koob-app:/localhost:9000') {
    mainWindow.webContents.send('gitoAuth', gitoAuth);
  }
});



